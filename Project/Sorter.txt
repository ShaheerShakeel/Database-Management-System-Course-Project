INCLUDE Irvine32.inc
.data
	checker dd 1
	array dd 5 DUP (0)
	array_length = ($ - array)
	input_meassage db "Enter Number: ",0
	output_meassage0 db "Your Sorted Array is: [",0
	output_meassage1 db "]",0
	comma db ", ",0
	selector db "1.Bubble Sort",0ah,0dh, "2.Insertion Sort",0ah,0dh, "3.Selection Sort",0ah,0dh,"Enter Your Choice: ",0
	Bubble db "You used Bubble sort",0
	Insertion db "You used Insertion sort",0
	Selection db "You used Selection sort",0

.code
	main PROC
		input:
			mov edx,offset input_meassage
			mov ecx,0
			mov ebx,0
			.while (ecx < array_length)
				call writestring
				call readint
				mov array[ecx],eax
				add ecx,4
			.endw
			call crlf
			mov eax,0

		Select:
			mov edx,offset selector
			call writestring
			call readint
			call crlf
			.If(eax == 1)
				mov edx,offset bubble
				call writestring
				jmp Bubble_Sorter
			.Elseif(eax == 2)
				mov edx,offset Insertion
				call writestring
				jmp Insertion_Sorter
			.Elseif(eax == 3)
				mov edx,offset Selection
				call writestring
				jmp Selection_Sort
			.Else
				jmp Select
			.Endif

		Bubble_Sorter:
			mov eax,0
			mov ebx,0
			mov ecx,0
			sub edx,edx
			.while(eax < array_length)
				mov edx,1
				mov checker,edx
				.while(ecx <= array_length)
					mov edx,array[ecx+4]
					.If(array[ecx] > edx)
						xchg array[ecx],edx
						mov array[ecx+4],edx
						sub edx,edx
						mov checker,edx
					.Endif
					add ecx,4
				.endw
				.If checker == 1
					jmp Print
				.Endif
				mov ecx,0
				add eax,4
			.endw
			jmp print

		Insertion_Sorter:
			mov eax,0
			mov ebx,0
			mov ecx,0
			sub edx,edx
			.while(eax < array_length-4)
				mov ecx,eax
				add ecx,4
				mov edx,array[ecx]
				.If(array[ecx-4] > edx)
					sub edx,edx
					.while(ecx > 0)
						mov edx,array[ecx-4]
						.If(edx > array[ecx])
							xchg array[ecx],edx
							mov array[ecx-4],edx
						.Endif
						sub ecx,4
					.endw
				.Endif
				mov ecx,0
				add eax,4
			.endw
			jmp print

		Selection_Sort:
			mov eax,0
			mov ebx,0
			mov ecx,0
			sub edx,edx
			.while(eax <= array_length)
				mov ebx,eax
				mov ecx,0
				.while(ecx <= array_length)
					mov edx,array[ecx]
					.If(array[ebx] < edx)
						mov ebx,ecx
					.Endif
					.If(ebx != eax)
						mov edx,array[ebx]
						xchg array[eax],edx
						mov array[ebx],edx
					.Endif
					sub edx,edx
					add ecx,4
				.endw
				mov ecx,0
				add eax,4
			.endw

		Print:
			call crlf
			mov edx,offset output_meassage0
			call writestring
			mov ecx,0
			mov edx,offset comma
			.while(ecx < array_length)
				mov eax,array[ecx]
				call writedec
				.If (ecx < array_length - 4)
					call writestring
				.Endif
				add ecx,4
			.endw
			mov edx,offset output_meassage1
			call writestring
			call crlf
	exit
	main ENDP
	END main